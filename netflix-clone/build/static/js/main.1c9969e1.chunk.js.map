{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","console","table","className","map","movie","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","log","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchTopActionMovies","fetchTopComedyMovies","fetchTopHorrorMovies","fetchTopRomanceMovies","fetchTopDocumentaries","Banner","input","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substring","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1c9969e1.chunk.js","sourcesContent":["import axios from \"axios\";\n\n/** base url to make requests to the movie database */\n\nconst instance = axios.create({\n  baseURL: \"https://api.themoviedb.org/3\",\n});\n\nexport default instance;","import React , { useEffect, useState } from 'react'\nimport axios from \"./axios\";\nimport YouTube from 'react-youtube';\nimport movieTrailer from 'movie-trailer'\nimport \"./Row.css\";\n\n\n\nconst base_url=\"https://image.tmdb.org/t/p/original/\";\n\n\nfunction Row({ title,fetchUrl,isLargeRow }) {\n\n    const [movies, setMovies] = useState([]);\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n   \n    useEffect(() => {\n        async function fetchData(){\n          const request = await axios.get(fetchUrl)\n          setMovies(request.data.results);\n          return request;\n        }\n        fetchData();\n    }, [fetchUrl])\n\n    const opts ={\n        height: \"390\",\n        width: \"100%\",\n        playerVars :{\n\n            autoplay: 1,\n        },\n    }\n\n    const handleClick = (movie) => {\n      if(trailerUrl){\n          setTrailerUrl(\"\");\n      }else{\nmovieTrailer(movie?.name || \"\")\n    .then(url => {\n    const urlParams = new URLSearchParams(new URL(url).search);\n    setTrailerUrl(urlParams.get(\"v\"));\n}).catch((error)=> console.log(error));\n      }\n    }\n\n    console.table(movies);\n\n    return (\n        <div className=\"row\">\n\n        <h2>{title}</h2>\n          \n        <div className=\"row_posters\">\n        \n        {movies.map(movie => (\n        \n        <img \n        key={movie.id}\n        onClick ={() => handleClick(movie)}\n        className={isLargeRow? \"row_posterLarge\" : \"row_poster\"}\n         src={`${base_url}${isLargeRow ? movie?.poster_path : movie?.backdrop_path }`} alt={movie.name} />\n        ))}\n        \n        </div>\n\n{trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />        \n}       </div>\n    )\n}\n\nexport default Row;\n","const API_KEY =\"698a1835feffc7e0fc65e928fa6ebdd9\";\n\nconst requests = {\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n    fetchTopActionMovies: `/discover/movie?api_key=${API_KEY}&with_geners=28`,\n    fetchTopComedyMovies: `/discover/movie?api_key=${API_KEY}&with_geners=35`,\n    fetchTopHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_geners=27`,\n    fetchTopRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_geners=10749`,\n    fetchTopDocumentaries: `/discover/movie?api_key=${API_KEY}&with_geners=99`,\n  };\n\n  export default requests;\n\n","import React, { useState } from 'react'\nimport { useEffect } from 'react';\nimport \"./Banner.css\"\nimport axios from './axios';\nimport requests from \"./requests\";\n\n\nfunction Banner() {\n\n    const [movie, setMovie] = useState([]);\n\n   useEffect (() => {\n    async function fetchData() {\n     const request = await axios.get(requests.fetchNetflixOriginals);\n     setMovie(\n        request.data.results[Math.floor(Math.random()* request.data.results.length-1)]\n     )\n     \n    }\n    fetchData();\n   },[])\n\n   \n\n   const truncate = (input) => input?.length > 150 ? `${input.substring(0, 150)}...` : input;\n\n   \n    return (\n        <header\n        className=\"banner\"\n        style={{\n            backgroundSize: \"cover\",\n            backgroundImage: `url(\n                \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\n            )`,\n            backgroundPosition: \"center center\",\n        }}\n\n        >  \n\n        \n        \n        <div className=\"banner_contents\">\n        <h1 className=\"banner_title\">{movie?.title || movie?.name || movie?.original_name}</h1>\n        <div className=\"banner_buttons\"> \n        <button className=\"banner_button\">\n         Play\n        </button>\n        <button className=\"banner_button\">\n        My List\n        </button>\n        </div>\n\n        <div className=\"banner_description\">{truncate(movie?.overview)}</div>\n        \n        </div>\n\n        <div className=\"banner-fadebottom\" />\n        \n        \n          \n        </header>\n    )\n}\n\nexport default Banner\n","import React, { useState } from 'react'\nimport { useEffect } from 'react'\nimport \"./Nav.css\"\n\nfunction Nav() {\n\n    const [show,handleShow] = useState(false);\n\n    useEffect(()=>{\n    window.addEventListener(\"scroll\",() => {\n        if(window.scrollY > 100){\n            handleShow(true);\n        } else handleShow(false);\n    });\n    return() => {\n        window.removeEventListener(\"scroll\");\n    };\n    },[])\n\n    return (\n        <div className={`nav ${show && \"nav-black\"}`}>\n        <img \n        className=\"nav_logo\"\n        src=\"https://www.freepnglogos.com/uploads/netflix-logo-0.png\"\n        alt=\"Netflix-logo\"\n        />\n        <img \n            className=\"nav_avatar\"\n            src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\"\n            alt=\"netflix-avatar\"\n        />\n        \n            \n        </div>\n    )\n}\n\nexport default Nav\n","\nimport './App.css';\nimport Row from './Row';\nimport requests from './requests';\nimport Banner from \"./Banner\";\nimport Nav from './Nav';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Nav/>\n      <Banner/>\n      \n      <Row \n      title=\"NETFLIX ORIGINALS\" \n      fetchUrl={requests.fetchNetflixOriginals}\n      isLargeRow\n      />\n      <Row title= \"Trending Now\" fetchUrl={requests.fetchTrending}/>\n      <Row title= \"Top Rated\" fetchUrl={requests.fetchTopRated}/>\n      <Row title= \"Action Movies\" fetchUrl={requests.fetchTopActionMovies}/>\n      <Row title= \"Comedy Movies\" fetchUrl={requests.fetchTopComedyMovies}/>\n      <Row title= \"Horror Movies\" fetchUrl={requests.fetchTopHorrorMovies}/>\n      <Row title= \"Romance Movies\" fetchUrl={requests.fetchTopRomanceMovies}/>\n      <Row title= \"Documentaries\" fetchUrl={requests.fetchTopDocumentaries}/>\n\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}